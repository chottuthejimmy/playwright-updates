name: TestDriver.ai / Generate / Playwright

permissions:
  actions: read
  contents: write
  statuses: write
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      base-branch:
        type: string
        required: true
        description: The branch name of the exploratory run
      run-id:
        type: string
        required: true
        description: The run id of the exploratory run
      run-attempt:
        type: string
        required: true
        description: The run attempt of the exploratory run
      website-url:
        type: string
        required: true
        description: The URL of the website to test

  workflow_call:
    inputs:
      website-url:
        type: string
        required: true
        description: The URL of the website to test
      base-branch:
        type: string
        required: true
        description: The branch name of the exploratory run
    secrets:
      key:
        required: true
        description: The TestDriver API key
      GH_TOKEN:
        required: true
        description: The GitHub token

jobs:

  find-regression-branches:
    name: Find regression branches
    runs-on: ubuntu-latest
    outputs:
      regression_branches: ${{ steps.matching.outputs.regression_branches }}
      test-name: ${{ steps.markdown_list.outputs.file_list }}
    steps:
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.base-branch }}

      - name: Find all markdown files and extract filenames
        id: markdown_list
        run: |
          FILES=$(ls ./testdriver/generate/*.md)
          FILENAMES=$(basename -a $FILES | sed 's/\.md$//')
          FILES_JSON=$(echo "$FILENAMES" | jq -R -s -c 'split("\n")[:-1]')
          echo "file_list=$FILES_JSON" >> $GITHUB_OUTPUT
          echo "File names to search for in branch names:"
          echo "$FILES_JSON"

      - name: Find branches with file name substrings
        id: matching
        run: |
          run_id="${{ inputs.run-id }}"
          attempt="${{ inputs.run-attempt }}"
          # Convert the comma-separated list back to newlines for processing
          file_names=$(echo "${{ steps.markdown_list.outputs.file_list }}" | tr ',' '\n')
          echo "File names to search for in branch names:"
          echo "$file_names"
          matches_array=()
          for file in $file_names; do
            echo "Searching for remote branches containing pattern: testdriver/regression-$file-$run_id-$attempt"
            # List remote branches that match the exact pattern.
            # Note: 'origin/' is removed to get the clean branch name.
            # Use grep with exact matching for the pattern
            pattern="testdriver/regression-${file}-${run_id}-${attempt}"
            branch_matches=$(git branch -r | grep --fixed-strings "origin/$pattern" | sed 's|origin/||' || true)
            if [ -n "$branch_matches" ]; then
              echo "Matches found for '$file':"
              echo "$branch_matches"
              # Add each matching branch to the array
              while IFS= read -r branch; do
                matches_array+=("$branch")
              done <<< "$branch_matches"
            fi
          done
          # Remove duplicates and format as a JSON array
          unique_matches=$(printf '%s\n' "${matches_array[@]}" | sort -u)
          matching_branches_json=$(echo "$unique_matches" | jq -R -s -c 'split("\n")[:-1]')
          echo "matching_branches=$matching_branches_json" >> $GITHUB_OUTPUT
          echo "Matching branches (JSON): $matching_branches_json"

  generate-playwright-tests:
    name: Generate Playwright Tests
    needs: find-regression-branches
    runs-on: ubuntu-latest
    strategy:
      matrix:
        branch: ${{ fromJson(needs.find-regression-branches.outputs.regression_branches) }}
        test-name: ${{ fromJson(needs.find-regression-branches.outputs.test-name) }}
      fail-fast: false
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.branch }}

      - uses: testdriverai/action@main
        with:
          key: ${{ secrets.key }}
          branch: ${{ matrix.branch }}
          prompt: 1. /run testdriver/${{ matrix.test-name }}.yml
          create-pr: true
          pr-base: main
          pr-title: "TestDriver.ai / Generate Playwright / ${{ matrix.test-name }}"
          pr-branch: testdriver/playwright-${{ matrix.test-name }}-${{ github.run_id }}-${{ github.run_attempt }}
          pr-test-filename: ${{ matrix.test-name }}.test.js
          prerun: |
            echo "Step 1: Installing Playwright globally"
            npm install playwright -g

            echo "Step 3: Installing Playwright dependencies"
            playwright install --with-deps chromium

            echo "Step 4: Generating Playwright script"
            $process = Start-Process -FilePath "npx" -ArgumentList "playwright codegen --target playwright-test --viewport-size=1920,1080 -o testdriver/${{ matrix.test-name }}.test.js ${{ inputs.website-url }}" -PassThru

            echo "Step 5: Completed"
            exit

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FORCE_COLOR: "3"