name: TestDriver.ai / Run / Playwright / UI Mode

on:
  workflow_dispatch:

permissions:
  actions: read
  contents: write
  statuses: write
  pull-requests: write

jobs:
  gather-test-files:
    name: Setup Test Matrix (./testdriver/*.yml.spec.js)
    runs-on: ubuntu-latest
    outputs:
      test_files: ${{ steps.test_list.outputs.files }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.ref }}
      - name: Find all test files and extract filenames
        id: test_list
        run: |
          FILES=$(ls ./testdriver/*.yml.spec.js)
          FILENAMES=$(basename -a $FILES)
          FILES_JSON=$(echo "$FILENAMES" | jq -R -s -c 'split("\n")[:-1]')
          echo "::set-output name=files::$FILES_JSON"

  test:
    needs: gather-test-files
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test: ${{ fromJson(needs.gather-test-files.outputs.test_files) }}
      fail-fast: false
    name: ${{ matrix.test }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.ref }}

      - name: Display filename being tested
        run: |
          echo "Running job for file: ${{ matrix.test }}"
      
      - uses: testdriverai/action@main
        with:
          key: ${{ secrets.key }}
          prompt: /exit
          create-pr: true
          pr-base: main
          pr-title: "TestDriver.ai / Generate Playwright / ${{ matrix.markdown }}"
          pr-branch: testdriver/regression-${{ matrix.markdown }}-${{ github.run_id }}-${{ github.run_attempt }}
          pr-test-filename: ${{matrix.markdown}}.yml
          prerun: |
            echo "Step 1: Installing Playwright globally"
            npm install playwright -g

            echo "Step 2: Installing Dashcam Chrome extension"
            npm install dashcam -g
            npm install dashcam-chrome

            echo "Step 3: Installing Playwright dependencies"
            playwright install --with-deps chromium

            # Get the current directory
            Write-Output "Getting the current directory..."
            $CurrentDir = Get-Location
            Write-Output "Current directory: $CurrentDir"

            # Define the relative path to the log file
            Write-Output "Defining the relative path to the log file..."
            $RelativeLogPath = "testdriver/playwright.log"
            Write-Output "Relative log path: $RelativeLogPath"

            # Combine the current directory with the relative path to get the absolute path
            Write-Output "Resolving absolute log file path..."
            $AbsoluteLogPath = Join-Path -Path $CurrentDir -ChildPath $RelativeLogPath
            Write-Output "Absolute log file path: $AbsoluteLogPath"

            # Run the dashcam track command with the resolved path
            Write-Output "Running dashcam track command..."
            & dashcam track --name=playwright --type=application --pattern="$AbsoluteLogPath"
            Write-Output "dashcam track command executed."


            echo "Step 4: Navigating to testdriver directory and running Playwright tests with custom Chromium launch"
            cd testdriver
            npx playwright test ${{ matrix.test }}.yml.spec.js | Out-File -FilePath playwright.log -Encoding utf8

            echo "Step 5: Completed"
            exit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FORCE_COLOR: "3"
